<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Django on</title><link>www.lovecode.icu/docs/python/django/</link><description>Recent content in Django on</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Tue, 06 Oct 2020 08:49:15 +0000</lastBuildDate><atom:link href="www.lovecode.icu/docs/python/django/index.xml" rel="self" type="application/rss+xml"/><item><title>Django ORM</title><link>www.lovecode.icu/docs/python/django/django-orm/</link><pubDate>Tue, 06 Oct 2020 08:49:15 +0000</pubDate><guid>www.lovecode.icu/docs/python/django/django-orm/</guid><description>Django ORM # orm前戏 # 1.首先书写一个类： # class IDMapping(models.Model): studyID = models.CharField(max_length=15, verbose_name='学号') # 学号 competitionID = models.CharField(max_length=15, verbose_name='竞赛编号') # 竞赛编号 # CharField必须要指定max_length参数，不然会直接报错 # verbose_name参数是所有字段都有的，就是用来对字段进行解释 ''' 由于一张表中必须要有主键，并且一般情况下都叫id 所以当你没有定义主键的时候，orm会自动地创建一个叫做id的主键 ''' 2.数据库迁移命令： # python3 manage.py makemigrations 将操作记录到migrations文件夹 python3 manage.py migrate 将操作同步到数据库中 只要修改了models.py文件的内容，就必须执行上述两条命令 字段的增删改查 # 字段的增加： # 可以直接在终端中给出默认值 该字段可以为空，设置null=True 直接设置字段默认值：default=&amp;lsquo;123&amp;rsquo; 字段的删除： # 直接注释对应的字段的代码然后执行两条数据库迁移命令即可
注意：执行后原来字段对应的数据将会消失 字段的修改： # 直接修改代码然后执行迁移命令 数据的增删改查 # 数据的查询： # res = models.User.objects.filter(username=username).first() ''' 返回值可以看作是列表数据对象的格式 它也支持索引取值，切片操作，但是不支持负数索引 他不推荐你使用索引的方式取值 ''' # filter括号内可以携带多个参数，参数与参数之间是and关系 # 可以把filter联想成where记忆 # 查询用户表里面的所有内容 # 方式一： res = models.</description></item><item><title>Django请求生命周期流程图</title><link>www.lovecode.icu/docs/python/django/django%E8%AF%B7%E6%B1%82%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E6%B5%81%E7%A8%8B%E5%9B%BE/</link><pubDate>Tue, 06 Oct 2020 08:49:15 +0000</pubDate><guid>www.lovecode.icu/docs/python/django/django%E8%AF%B7%E6%B1%82%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E6%B5%81%E7%A8%8B%E5%9B%BE/</guid><description>Django请求生命周期流程图 #</description></item><item><title>FBV与CBV</title><link>www.lovecode.icu/docs/python/django/fbv%E4%B8%8Ecbv/</link><pubDate>Tue, 06 Oct 2020 08:49:15 +0000</pubDate><guid>www.lovecode.icu/docs/python/django/fbv%E4%B8%8Ecbv/</guid><description>FBV与CBV # 视图函数可以是函数也可以是类
FBV # def index(request): return HttpResponse('index') CBV # # CBV实现 from django.views import View class MyLogin(View): def get(self,request): return render(request,'form.html') def post(self,request): return HttpResponse('POST方法') # CBV路由 url(r'^login/',views.MyLogin.as_view()) FBV和CBV各有千秋 CBV特点： # 能够直接根据请求方式的不同直接匹配到对应的方法执行</description></item><item><title>request对象方法初识</title><link>www.lovecode.icu/docs/python/django/request%E5%AF%B9%E8%B1%A1%E6%96%B9%E6%B3%95%E5%88%9D%E8%AF%86/</link><pubDate>Tue, 06 Oct 2020 08:49:15 +0000</pubDate><guid>www.lovecode.icu/docs/python/django/request%E5%AF%B9%E8%B1%A1%E6%96%B9%E6%B3%95%E5%88%9D%E8%AF%86/</guid><description>request对象方法初识 # request.method # 返回请求方式，并且是全大写的字符串形式 request.POST # 获取用户post请求提交的普通数据，不包含文件 request.POST.get() # 只获取列表最后一个元素 request.POST.getList() # 直接将列表取出 request.GET # 获取用户提交的get请求数据 request.GET.get() # 只获取列表最后一个元素 request.GET.getList() # 直接将列表取出 区别： # get请求携带的数据有大小限制，最大好像是4KB
post请求没有限制</description></item><item><title>路由层</title><link>www.lovecode.icu/docs/python/django/%E8%B7%AF%E7%94%B1%E5%B1%82/</link><pubDate>Tue, 06 Oct 2020 08:49:15 +0000</pubDate><guid>www.lovecode.icu/docs/python/django/%E8%B7%AF%E7%94%B1%E5%B1%82/</guid><description>路由层 # 路由匹配 # url(r'^test/$', views.test) url(r'^testadd/$', views.testadd) # 首页 url(r'^$', views.home) ''' url方法第一个参数是正则表达式， 只要第一个参数正则表达式能够匹配到内容，那么就会立刻停止往下匹配 直接执行对应的视图函数 你在输入url的时候会默认加斜杠 django内部默认帮你做到重定向 第一次匹配不到 加斜杠再匹配一次 ''' # 取消自动加斜杠 APPEND_SLASH = Flase/True # 默认是True自动加斜杠 无名有名分组 # 无名分组 # # 分组，就是给某一段正则表达式用小括号括起来 url(r'^test/(\d+)/', views.test) def test(request,xx): print(xx) return HttpResponse('test') # 无名分组就是将括号内正则表达式匹配到的内容当作位置参数传递给后面的视图函数 有名分组 # # 可以给正则表达式起一个别名 url(r'^testadd/(?P&amp;lt;year&amp;gt;\d+)/', views.testadd) def testadd(request,year): print(year) return HttpResponse('testadd') # 有名分组就是将括号内正则表达式匹配到的内容当作关键字参数传递给后面的视图函数 无名有名是否可以混合使用 # # 不能混用，但是同一个分组可以使用N多次 url(r'^test/(\d+)/(\d+)/(\d+)/', views.test) url(r'^testadd/(?P&amp;lt;year&amp;gt;\d+)/(?P&amp;lt;year&amp;gt;\d+)/(?P&amp;lt;year&amp;gt;\d+)/', views.testadd) 反向解析 # # 本质：通过一些方法得到一个结果，该结果可以直接访问对应的url触发视图函数的运行 # 先给路由与视图函数起一个别名 url(r'^func/',views.</description></item><item><title>连接数据库</title><link>www.lovecode.icu/docs/python/django/%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/</link><pubDate>Tue, 06 Oct 2020 08:49:15 +0000</pubDate><guid>www.lovecode.icu/docs/python/django/%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/</guid><description>连接数据库 # pycharm连接数据库 # 三个位置查找数据库相关：
右侧上方database 左下角database 配置里面plugins插件搜索安装 再没有卸载重装pycharm
pycharm可以充当很多数据库的客户端
注意：连接前需提前创建好库 django连接数据库 # 默认配置：
DATABASES = { 'default': { 'ENGINE': 'django.db.backends.sqlite3', 'NAME': BASE_DIR / 'db.sqlite3', } } 第一步在配置文件中配置 DATABASES = { 'default': { 'ENGINE': 'django.db.backends.mysql', 'NAME': 'django', 'USER': 'root', 'PASSWORD': 'root', 'HOST': '127.0.0.1', 'PORT':3306, 'CHARSET':'utf8', } } 代码声明 django默认使用的是mysqldb模块连接MySQL
但是该模块的兼容性不好，需要手动替换为pymsql
在项目名下的init或应用中的init文件中书写以下代码都可以
import pymsql pymsql.install_as_MySQLdb()</description></item><item><title>静态文件配置</title><link>www.lovecode.icu/docs/python/django/%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE/</link><pubDate>Tue, 06 Oct 2020 08:49:15 +0000</pubDate><guid>www.lovecode.icu/docs/python/django/%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE/</guid><description>静态文件配置 # 我们将HTML文件默认放在templates文件夹下，将静态文件放到static文件夹下。
静态文件： # 前端已经写好了的，能够直接调用使用的文件
django默认不会创建static文件夹，需手动创建并进行进一步划分
static文件夹：
css js img 其他第三方文件 静态文件配置： # 缓存问题： # 当你在写django项目的时候，可能会出现后端代码修改了但前端页面没有变化的情况：
在同一个端口开了好几个django项目，一直在跑的其实是第一个项目 浏览器缓存问题：在检查窗口的设置中勾选上禁用缓存。（diable cache） 配置问题： # 在浏览器中输入url能够访问到对应的资源，是因为后端开设了该资源的接口
如果访问不到该资源，则说明后端没有开设该资源的接口 如何配置： # # settings.py STATIC_URL = '/static/' ''' 类似于访问静态文件的令牌，如果想访问静态文件，必须以static开头 ''' STATICFILES_DIR = [ os.path.join(BASE_DIR, 'static'), os.path.join(BASE_DIR, 'static1'), os.path.join(BASE_DIR, 'static2'), ] ''' 在列表从上往下寻找文件 ''' 动态解析静态文件： # HTML中的模板语法配置：</description></item></channel></rss>