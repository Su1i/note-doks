<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Python基础 on</title><link>www.lovecode.icu/docs/python/python%E5%9F%BA%E7%A1%80/</link><description>Recent content in Python基础 on</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Tue, 06 Oct 2020 08:49:15 +0000</lastBuildDate><atom:link href="www.lovecode.icu/docs/python/python%E5%9F%BA%E7%A1%80/index.xml" rel="self" type="application/rss+xml"/><item><title>01.第一章 起步</title><link>www.lovecode.icu/docs/python/python%E5%9F%BA%E7%A1%80/01.%E7%AC%AC%E4%B8%80%E7%AB%A0-%E8%B5%B7%E6%AD%A5/</link><pubDate>Tue, 06 Oct 2020 08:49:15 +0000</pubDate><guid>www.lovecode.icu/docs/python/python%E5%9F%BA%E7%A1%80/01.%E7%AC%AC%E4%B8%80%E7%AB%A0-%E8%B5%B7%E6%AD%A5/</guid><description>01.第一章 起步 # 阅读《python编程：从入门到实践》整理的笔记，分享出来和大家一起学习，不足的地方希望大家指出。同时也推荐一下《python编程：从入门到实践》这本书，适合小白学习python的入门书籍。
1.1搭建编程环境 # 安装python
安装vs code
1.2 在不同操作系统中搭建python环境 # 1.3 解决安装问题 # 1.4 从终端中运行python程序 # print(&amp;quot;hello world!&amp;quot;) 1.5 小结 # 在本章中，你大致了解了Python，并在自己的系统中安装了Python。你还安装了一个文本编辑器，以简化Python代码的编写工作。你学习了如何在终端会话中运行Python代码片段，并运行了第一个货真价实的程序——hello_world.py。你还大致了解了如何解决安装问题。
在下一章，你将学习如何在Python程序中使用各种数据和变量。
#</description></item><item><title>02.第二章 变量和简单的数据结构</title><link>www.lovecode.icu/docs/python/python%E5%9F%BA%E7%A1%80/02.%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E5%8F%98%E9%87%8F%E5%92%8C%E7%AE%80%E5%8D%95%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link><pubDate>Tue, 06 Oct 2020 08:49:15 +0000</pubDate><guid>www.lovecode.icu/docs/python/python%E5%9F%BA%E7%A1%80/02.%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E5%8F%98%E9%87%8F%E5%92%8C%E7%AE%80%E5%8D%95%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</guid><description>02.第二章 变量和简单的数据结构 # 2.1运行hello_world.py时发生的情况 # 2.2 变量 # message = &amp;quot;Hello Python world!&amp;quot; print(message) message = &amp;quot;Hello Python Crash Course world!&amp;quot; print(message) 运行结果
Hello Python world! Hello Python Crash Course world! 2.2.1 变量的命名和使用 # 变量名只能包含字母、数字和下划线。变量名可以字母或下划线打头，但不能以数字打头，例如，可将变量命名为message_1，但不能将其命名为1_message。 变量名不能包含空格，但可使用下划线来分隔其中的单词。例如，变量名greeting_message可行，但变量名greeting message会引发错误。 不要将Python关键字和函数名用作变量名，即不要使用Python保留用于特殊用途的单词，如print（请参见附录A.4）。 变量名应既简短又具有描述性。例如，name比n好，student_name比s_n好，name_length比length_of_persons_name好。 慎用小写字母l和大写字母O，因为它们可能被人错看成数字1和0。 2.2.2 使用变量时避免命名错误 # 2.3 字符串 # 字符串就是一系列字符。在Python中，用引号括起的都是字符串，其中的引号可以是单引号，也可以是双引号，如下所示：
&amp;quot;This is a string.&amp;quot; 'This is also a string.' 2.3.1 使用方法修改字符串的大小写 # name = &amp;quot;ada lovelace&amp;quot; print(name.title()) 运行结果
Ada Lovelace 在name.title()中，name后面的句点（.）让Python对变量name执行方法title()指定的操作。每个方法后面都跟着一对括号，这是因为方法通常需要额外的信息来完成其工作。这种信息是在括号内提供的。函数title()不需要额外的信息，因此它后面的括号是空的。
title()以首字母大写的方式显示每个单词，即将每个单词的首字母都改为大写。
要将字符串改为全部大写或全部小写，可以像下面这样做：</description></item><item><title>03.第三章 列表简介</title><link>www.lovecode.icu/docs/python/python%E5%9F%BA%E7%A1%80/03.%E7%AC%AC%E4%B8%89%E7%AB%A0-%E5%88%97%E8%A1%A8%E7%AE%80%E4%BB%8B/</link><pubDate>Tue, 06 Oct 2020 08:49:15 +0000</pubDate><guid>www.lovecode.icu/docs/python/python%E5%9F%BA%E7%A1%80/03.%E7%AC%AC%E4%B8%89%E7%AB%A0-%E5%88%97%E8%A1%A8%E7%AE%80%E4%BB%8B/</guid><description>03.第三章 列表简介 # 3.1 列表是什么 # 列表由一系列按特定顺序排列的元素组成。
在Python中，用方括号（[]）来表示列表，并用逗号来分隔其中的元素。下面是一个简单的列表示例，这个列表包含几种自行车：
bicycles = ['trek', 'cannondale', 'redline', 'specialized'] print(bicycles) 如果你让Python将列表打印出来，Python将打印列表的内部表示，包括方括号：
['trek', 'cannondale', 'redline', 'specialized'] 3.1.1 访问列表元素 # 列表是有序集合，因此要访问列表的任何元素，只需将该元素的位置或索引告诉Python即可。
要访问列表元素，可指出列表的名称，再指出元素的索引，并将其放在方括号内。
bicycles = ['trek', 'cannondale', 'redline', 'specialized'] print(bicycles[0]) 当你请求获取列表元素时，Python只返回该元素，而不包
括方括号和引号：
trek 可使用方法title()让元素&amp;rsquo;trek&amp;rsquo;的格式更整洁
3.1.2 索引从0而不是1开始 # 在Python中，第一个列表元素的索引为0，而不是1。
Python为访问最后一个列表元素提供了一种特殊语法。通过将索引指定为-1，可让Python返回最后一个列表元素。索引-2返回倒数第二个列表元素，索引-3返回倒数第三个列表元素，以此类推。
3.1.3 使用列表中的各个值 # 可像使用其他变量一样使用列表中的各个值。
3.2 修改、添加和删除元素 # 3.2.1 修改列表元素 # 修改列表元素的语法与访问列表元素的语法类似。要修改列表元素，可指定列表名和要修改的元素的索引，再指定该元素的新值。
motorcycles = ['honda', 'yamaha', 'suzuki'] print(motorcycles) motorcycles[0] = 'ducati' print(motorcycles) ['honda', 'yamaha', 'suzuki'] ['ducati', 'yamaha', 'suzuki'] 你可以修改任何列表元素的值，而不仅仅是第一个元素的值。
3.2.2 在列表中添加元素 # 1.</description></item><item><title>04.第四章 操作列表</title><link>www.lovecode.icu/docs/python/python%E5%9F%BA%E7%A1%80/04.%E7%AC%AC%E5%9B%9B%E7%AB%A0-%E6%93%8D%E4%BD%9C%E5%88%97%E8%A1%A8/</link><pubDate>Tue, 06 Oct 2020 08:49:15 +0000</pubDate><guid>www.lovecode.icu/docs/python/python%E5%9F%BA%E7%A1%80/04.%E7%AC%AC%E5%9B%9B%E7%AB%A0-%E6%93%8D%E4%BD%9C%E5%88%97%E8%A1%A8/</guid><description>04.第四章 操作列表 # 4.1 遍历整个列表 # 需要对列表中的每个元素都执行相同的操作时，可使用Python中的for循环。
下面使用for循环来打印魔术师名单中的所有名字：
magicians = ['alice', 'david', 'carolina'] for magician in magicians: print(magician) 首先，我们像第3章那样定义了一个列表。接下来，我们定义了一个for循环；这行代码让Python从列表magicians中取出一个名字，并将其存储在变量magician中。最后，我们让Python打印前面存储到变量magician中的名字。
alice david carolina 4.1.1 深入的研究循环 # Python将首先读取其中的第一行代码：
for magician in magicians: 这行代码让Python获取列表magicians中的第一个值（&amp;lsquo;alice&amp;rsquo;），并将其存储到变量magician中。接下来，Python读取下一行代码：
print(magician) 它让Python打印magician的值——依然是&amp;rsquo;alice&amp;rsquo;。鉴于该列表还包含其他值，Python返回到循环的第一行：
for magician in magicians: Python获取列表中的下一个名字——&amp;lsquo;david&amp;rsquo;，并将其存储到变量magician中，再执行下面这行代码：
print(magician) Python再次打印变量magician的值——当前为&amp;rsquo;david&amp;rsquo;。接下来，Python再次执行整个循环，对列表中的最后一个值——&amp;lsquo;carolina&amp;rsquo;进行处理。至此，列表中没有其他的值了，因此Python接着执行程序的下一行代码。在这个示例中，for循环后面没有其他的代码，因此程序就此结束。
4.1.2 在for循环中执行更多的操作 # 在for循环中，想包含多少行代码都可以。在代码行for magician in magicians后面，每个缩进的代码行都是循环的一部分，且将针对列表中的每个值都执行一次。因此，可对列表中的每个值执行任意次数的操作。
magicians = ['alice', 'david', 'carolina'] for magician in magicians: print(magician.title() + &amp;quot;, that was a great trick!&amp;quot;) print(&amp;quot;I can't wait to see your next trick, &amp;quot; + magician.</description></item><item><title>05.第五章 if语句</title><link>www.lovecode.icu/docs/python/python%E5%9F%BA%E7%A1%80/05.%E7%AC%AC%E4%BA%94%E7%AB%A0-if%E8%AF%AD%E5%8F%A5/</link><pubDate>Tue, 06 Oct 2020 08:49:15 +0000</pubDate><guid>www.lovecode.icu/docs/python/python%E5%9F%BA%E7%A1%80/05.%E7%AC%AC%E4%BA%94%E7%AB%A0-if%E8%AF%AD%E5%8F%A5/</guid><description>05.第五章 if语句 # 5.1 一个简单示例 # cars = ['audi', 'bmw', 'subaru', 'toyota'] for car in cars: if car == 'bmw': print(car.upper()) else: print(car.title()) 这个示例中的循环首先检查当前的汽车名是否是&amp;rsquo;bmw&amp;rsquo;。如果是，就以全大写的方式打印它；否则就以首字母大写的方式打印：
Audi BMW Subaru Toyota 5.2 条件测试 # 每条if语句的核心都是一个值为True或False的表达式，这种表达式被称为条件测试。Python根据条件测试的值为True还是False来决定是否执行if语句中的代码。如果条件测试的值为True，Python就执行紧跟在if语句后面的代码；如果为False，Python就忽略这些代码。
5.2.1 检查是否相等 # &amp;gt;&amp;gt;&amp;gt; car = 'bmw' &amp;gt;&amp;gt;&amp;gt; car == 'bmw' True &amp;gt;&amp;gt;&amp;gt; car = 'audi' &amp;gt;&amp;gt;&amp;gt; car == 'bmw' False 这个相等运算符（==）在它两边的值相等时返回True，否则返回False。
5.2.2 检查是否相等时不考虑大小写 # 在Python中检查是否相等时区分大小写，两个大小写不同的值会被视为不相等：
&amp;gt;&amp;gt;&amp;gt; car = 'Audi' &amp;gt;&amp;gt;&amp;gt; car == 'audi' False 如果大小写无关紧要，而只想检查变量的值，可将变量的值转换为小写，再进行比较：
&amp;gt;&amp;gt;&amp;gt; car = 'Audi' &amp;gt;&amp;gt;&amp;gt; car.</description></item><item><title>06.第六章 字典</title><link>www.lovecode.icu/docs/python/python%E5%9F%BA%E7%A1%80/06.%E7%AC%AC%E5%85%AD%E7%AB%A0-%E5%AD%97%E5%85%B8/</link><pubDate>Tue, 06 Oct 2020 08:49:15 +0000</pubDate><guid>www.lovecode.icu/docs/python/python%E5%9F%BA%E7%A1%80/06.%E7%AC%AC%E5%85%AD%E7%AB%A0-%E5%AD%97%E5%85%B8/</guid><description>06.第六章 字典 # 6.1 一个简单的字典 # 来看一个游戏，其中包含一些外星人，这些外星人的颜色和点数各不相同。下面是一个简单的字典，存储了有关特定外星人的信息：
alien_0 = {'color': 'green', 'points': 5} print(alien_0['color']) print(alien_0['points']) 字典alien_0存储了外星人的颜色和点数。使用两条print语句来访问并打印这些信息，如下所示：
green 5 6.2 使用字典 # 在Python中，字典是一系列键—值对。每个键都与一个值相关联，你可以使用键来访问与之相关联的值。与键相关联的值可以是数字、字符串、列表乃至字典。事实上，可将任何Python对象用作字典中的值。
在Python中，字典用放在花括号{}中的一系列键—值对表示，如前面的示例所示：
alien_0 = {'color': 'green', 'points': 5} 键—值对是两个相关联的值。指定键时，Python将返回与之相关联的值。键和值之间用冒号分隔，而键—值对之间用逗号分隔。在字典中，你想存储多少个键—值对都可以。
最简单的字典只有一个键—值对，如下述修改后的字典alien_0所示：
alien_0 = {'color': 'green'} 这个字典只存储了一项有关alien_0的信息，具体地说是这个外星人的颜色。在这个字典中，字符串&amp;rsquo;color&amp;rsquo;是一个键，与之相关联的值为&amp;rsquo;green&amp;rsquo;。
6.2.1 访问字典中的值 # 要获取与键相关联的值，可依次指定字典名和放在方括号内的键，如下所示：
alien_0 = {'color': 'green'} print(alien_0['color']) 这将返回字典alien_0中与键&amp;rsquo;color&amp;rsquo;相关联的值：
green 字典中可包含任意数量的键—值对。
现在，你可以访问外星人alien_0的颜色和点数。如果玩家射杀了这个外星人，你就可以使用下面的代码来确定玩家应获得多少个点：
alien_0 = {'color': 'green', 'points': 5} new_points = alien_0['points'] print(&amp;quot;You just earned &amp;quot; + str(new_points) + &amp;quot; points!&amp;quot;) 上述代码首先定义了一个字典，然后从这个字典中获取与键&amp;rsquo;points&amp;rsquo;相关联的值，并将这个值存储在变量new_points中。接下来，将这个整数转换为字符串，并打印一条消息，指出玩家获得了多少个点：
You just earned 5 points!</description></item></channel></rss>